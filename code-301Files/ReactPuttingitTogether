# Thinking in React
## What is the single responsibility principle and how does it apply to components?
"Component should ideally do one thing." 
https://react.dev/learn/thinking-in-react
## What does it mean to build a ‘static’ version of your application?
A version without any interactivity. 
## Once you have a static application, what do you need to add?
Add states (minimal but complete representation of UI state).
## What are the three questions you can ask to determine if something is state?
a. Is it passed in from a parent component through props? If yes, then it is not state.

b. Does it remain unchanged over time? If yes, then it is not state?

c. Can you compute it based on any other state or props in the component? If so, it is not state.

## How can you identify where state needs to live?
Place it as high as possible/identify which components need to access it.

# Higher-order Function
## What is a “higher-order function”?
"Functions that operate on other functions, either by taking them as arguments or by returning them, are called higher-order functions"
https://eloquentjavascript.net/05_higher_order.html#h_xxCc98lOBK

## Explore the greaterThan function as defined in the reading. In your own words, what is line 2 of this function doing?
It compares m with n and identifies if m is greater than n.
## Explain how either map or reduce operates, with regards to higher-order functions.
Reduce takes a combining function and produces a new result based on the given functions.

function reduce(array, combine, start) {
  let current = start;
  for (let element of array) {
    current = combine(current, element);
  }
  return current;
}

console.log(reduce([1, 2, 3, 4], (a, b) => a + b, 0));
// → 10
